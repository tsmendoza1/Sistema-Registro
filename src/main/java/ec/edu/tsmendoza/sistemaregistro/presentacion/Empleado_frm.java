/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package ec.edu.tsmendoza.sistemaregistro.presentacion;

import com.mysql.cj.conf.PropertyKey;
import ec.edu.tsmendoza.sistemaregistro.negocio.PersonaServicio;
import java.awt.Color;
import java.text.SimpleDateFormat;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import modelo.Empleado.RolEmpleado;
import modelo.Empleado;

/**
 *
 * @author Dell Inspiron 16
 */
public class Empleado_frm extends javax.swing.JInternalFrame {

    /**
     * Creates new form Empleado
     */
    public static DefaultTableModel modelo;
    private List<Empleado> listadoEmpleados;
    private PersonaServicio servicio;
    private SimpleDateFormat formato;

    public Empleado_frm() {
        initComponents();
        servicio = new PersonaServicio();
        List<Empleado> lista = servicio.ObtenerEmpleados();
        mostrarDatos(lista);
        for (RolEmpleado rol : RolEmpleado.values()) {
            cmb_rol.addItem(rol.toString());
        }
        this.formato = new SimpleDateFormat("dd-MM-yyyy");
    }

    private void mostrarDatos(List<Empleado> listaEmpleado) {
        listadoEmpleados = listaEmpleado;
        modelo = new DefaultTableModel();
        modelo.addColumn("ID"); //0
        modelo.addColumn("Cedula");//1
        modelo.addColumn("Nombre");//2
        modelo.addColumn("Apellido");//3
        modelo.addColumn("Correo");//4
        modelo.addColumn("F_Nacimiento");//5
        modelo.addColumn("Edad");//6
        modelo.addColumn("Telefono");//7
        modelo.addColumn("F_Ingreso");//8
        modelo.addColumn("Activo");//8
        modelo.addColumn("Rol");//8

        for (Empleado emp : listaEmpleado) {
            Object[] fila = {
                emp.getId(),
                emp.getCedula(),
                emp.getNombre(),
                emp.getApellido(),
                emp.getCorreo(),
                emp.getFecha_nacimiento(),
                emp.getEdad(),
                emp.getTelefono(),
                emp.getFechaIngreso(),
                emp.isActivo(),
                emp.getRol()
            };
            modelo.addRow(fila);
        }
        tbl_empleado.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txt_nombre = new javax.swing.JTextField();
        txt_apellido = new javax.swing.JTextField();
        txt_cedula = new javax.swing.JTextField();
        txt_correo = new javax.swing.JTextField();
        txt_telefono = new javax.swing.JTextField();
        txt_fechaNacimiento = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cmb_rol = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_empleado = new javax.swing.JTable();
        butt_agregar = new javax.swing.JButton();
        butt_actualizar = new javax.swing.JButton();
        butt_eliminar = new javax.swing.JButton();
        butt_limpiar = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txt_activo = new javax.swing.JRadioButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Empleado");

        jLabel1.setText("Nombre:");

        jLabel2.setText("Apellido:");

        jLabel3.setText("Correo:");

        jLabel4.setText("Telefono:");

        jLabel5.setText("F_Nacimiento:");

        jLabel6.setText("Cedula:");

        jLabel8.setText("Cargo:");

        tbl_empleado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbl_empleado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_empleadoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_empleado);

        butt_agregar.setText("Agregar");
        butt_agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butt_agregarActionPerformed(evt);
            }
        });

        butt_actualizar.setText("Actualizar");
        butt_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butt_actualizarActionPerformed(evt);
            }
        });

        butt_eliminar.setText("Eliminar");
        butt_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butt_eliminarActionPerformed(evt);
            }
        });

        butt_limpiar.setText("Limpiar");
        butt_limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butt_limpiarActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setText("Empleados Registrados:");

        jLabel10.setText("Activo:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel10)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_nombre)
                            .addComponent(txt_cedula)
                            .addComponent(txt_telefono, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txt_activo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_apellido)
                    .addComponent(txt_correo)
                    .addComponent(txt_fechaNacimiento)
                    .addComponent(cmb_rol, 0, 147, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(butt_actualizar)
                        .addComponent(butt_eliminar)
                        .addComponent(butt_agregar))
                    .addComponent(butt_limpiar, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(27, 27, 27))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {butt_actualizar, butt_agregar, butt_eliminar, butt_limpiar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txt_apellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butt_agregar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txt_cedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txt_correo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butt_actualizar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txt_telefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txt_fechaNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butt_eliminar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(cmb_rol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(butt_limpiar)
                        .addComponent(jLabel10))
                    .addComponent(txt_activo))
                .addGap(56, 56, 56)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(133, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butt_agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butt_agregarActionPerformed
        RegistrarNuevoEmpleado();
    }//GEN-LAST:event_butt_agregarActionPerformed

    private void butt_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butt_eliminarActionPerformed
        eliminarEmpleado();
    }//GEN-LAST:event_butt_eliminarActionPerformed

    private void tbl_empleadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_empleadoMouseClicked
        llenarFormularioDesdeTabla();
    }//GEN-LAST:event_tbl_empleadoMouseClicked

    private void butt_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butt_actualizarActionPerformed
        ActualizarDatosEmpleado();
    }//GEN-LAST:event_butt_actualizarActionPerformed

    private void butt_limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butt_limpiarActionPerformed
        LimpiarFormulario();
    }//GEN-LAST:event_butt_limpiarActionPerformed

    public boolean ValidarFormulario() {
        Border bordeRojo = BorderFactory.createLineBorder(Color.RED, 2);
        Border bordeNegro = BorderFactory.createLineBorder(Color.BLACK, 2);

        txt_cedula.setBorder(txt_cedula.getText().trim().isEmpty() ? bordeRojo : bordeNegro);
        txt_correo.setBorder(txt_correo.getText().trim().isEmpty() ? bordeRojo : bordeNegro);
        txt_nombre.setBorder(txt_nombre.getText().trim().isEmpty() ? bordeRojo : bordeNegro);
        txt_apellido.setBorder(txt_nombre.getText().trim().isEmpty() ? bordeRojo : bordeNegro);
        txt_telefono.setBorder(txt_telefono.getText().trim().isEmpty() ? bordeRojo : bordeNegro);
        txt_fechaNacimiento.setBorder(txt_fechaNacimiento.getText().trim().isEmpty() ? bordeRojo : bordeNegro);

        return !(txt_cedula.getText().trim().isEmpty()
                || txt_correo.getText().trim().isEmpty()
                || txt_nombre.getText().trim().isEmpty()
                || txt_telefono.getText().trim().isEmpty()
                || txt_fechaNacimiento.getText().trim().isEmpty());
    }

    private void RegistrarNuevoEmpleado() {
        // Si el formulario esta lleno proceder a enviarlo a la capa de negocio
        if (ValidarFormulario()) {
            Empleado nuevoEmpleado = GenerarDatosEmpleado();
            // Se valida si la persona no sea nula, si es asi acaba el metodo
            if (nuevoEmpleado == null) {
                return;
            }
            // [0] ya existe la persomna  [1] registro de persona exitoso
            // [2] Error interno [3] la persona es menor de edad
            int registro = servicio.AgregarNuevsPersona(nuevoEmpleado);
            switch (registro) {
                case 0:
                    MostrarMensajePanel("Ya existe la persona con ese número de cédula.",
                            "Advertencia", JOptionPane.WARNING_MESSAGE);
                    break;

                case 1:
                    MostrarMensajePanel("Registro exitoso.",
                            "Información", JOptionPane.INFORMATION_MESSAGE);
                    // Se actualiza la tabla de registro y limpiar el formulario

                    List<Empleado> listadoEmpleados = servicio.ObtenerEmpleados();
                    mostrarDatos(listadoEmpleados);
                    LimpiarFormulario();
                    break;

                case 2:
                    MostrarMensajePanel("Error interno, intentelo más tarde.",
                            "Error", JOptionPane.ERROR_MESSAGE);
                    break;

                case 3:
                    MostrarMensajePanel("El sistema solo permite registrar a mayores de edad.",
                            "Advertencia", JOptionPane.QUESTION_MESSAGE);
                    break;
            }
        } else {
            MostrarMensajePanel("Debe completar todos los campos obligatorios.",
                    "Advertencia", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void llenarFormularioDesdeTabla() {
        int filaSeleccionada = tbl_empleado.getSelectedRow();

        if (filaSeleccionada >= 0) {

            // Obtenemos el objeto Persona desde la lista
            Empleado personaSeleccionada = listadoEmpleados.get(filaSeleccionada);

            txt_nombre.setText(personaSeleccionada.getNombre());
            txt_apellido.setText(personaSeleccionada.getApellido());
            txt_cedula.setText(personaSeleccionada.getCedula());
            txt_correo.setText(personaSeleccionada.getCorreo());
            txt_telefono.setText(personaSeleccionada.getTelefono());
            String rol = personaSeleccionada.getRol().toString();
            Boolean activo = personaSeleccionada.isActivo();

            switch (rol) {
                case "Cajero":
                    cmb_rol.setSelectedIndex(0);
                    break;
                case "Supervisor":
                    cmb_rol.setSelectedIndex(1);
                    break;
                case "Administrativo":
                    cmb_rol.setSelectedIndex(2);
                    break;
            }
            
            if(activo){
                txt_activo.setSelected(true);
            }else{
                txt_activo.setSelected(false);
            }

            // Convertir LocalDate a String con formato dd-MM-yyyy
            LocalDate fechaNacimiento = personaSeleccionada.getFecha_nacimiento();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
            txt_fechaNacimiento.setText(fechaNacimiento.format(formatter));
        }
    }

    private void eliminarEmpleado() {
        // Se obtiene el id seleccionado de la tabla
        int filaSeleccionada = tbl_empleado.getSelectedRow();

        // Se valdia que la fila seleccionada sea superior a cero 
        if (filaSeleccionada >= 0) {
            // Confirmar antes de eliminar
            int confirmacion = JOptionPane.showConfirmDialog(null,
                    "¿Estás seguro de eliminar esta persona?",
                    "Confirmar eliminación",
                    JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                int idEmpleado = listadoEmpleados.get(filaSeleccionada).getId();
                System.out.println("El id" + idEmpleado);

                boolean eliminado = servicio.EliminarPersonaPorId(idEmpleado);

                if (eliminado) {
                    JOptionPane.showMessageDialog(null, "Persona eliminada correctamente.");
                    List<Empleado> listaEmpelado = servicio.ObtenerEmpleados();
                    mostrarDatos(listaEmpelado);
                } else {
                    JOptionPane.showMessageDialog(null, "No se pudo eliminar la persona.");
                }
            }
        }
    }

    private void ActualizarDatosEmpleado() {
        // Se obtiene el id seleccionado de la tabla
        int filaSeleccionada = this.tbl_empleado.getSelectedRow();
        // Se valdia que la fila seleccionada sea superior a cero

        if (filaSeleccionada >= 0) {
            // Si el formulario esta lleno proceder a enviarlo a la capa de negocio
            if (ValidarFormulario()) {
                Empleado actualizarEmpleado = GenerarDatosEmpleado();
                // Se valida si la persona no sea nula, si es asi acaba el metodo
                if (actualizarEmpleado == null) {
                    return;
                }
                // Se obtiene el id de la persona
                int idEmpleado = this.listadoEmpleados.get(filaSeleccionada).getId();
                boolean actualizado = this.servicio.ActualizarEmpleado(idEmpleado, actualizarEmpleado);

                // Se verifica si la persona se a actualizado correctamente
                if (actualizado) {
                    MostrarMensajePanel("Registro actualizado.",
                            "Información", JOptionPane.INFORMATION_MESSAGE);
                    mostrarDatos(listadoEmpleados);
                    LimpiarFormulario();
                } else {
                    MostrarMensajePanel("No se pudo actualizar el registro.",
                            "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            }
        }
    }

    private Empleado GenerarDatosEmpleado() {
        Empleado nuevoEmpleado = null;
        String nombre = this.txt_nombre.getText();
        String apellido = this.txt_apellido.getText();
        String cedula = this.txt_cedula.getText();
        String correo = this.txt_correo.getText();
        String fechaNac = this.txt_fechaNacimiento.getText();
        //String direccion = this.txt_direccion.getText();
        String telefono = this.txt_telefono.getText();
        String rol = this.cmb_rol.getSelectedItem().toString();
        RolEmpleado rolEnum = RolEmpleado.valueOf(rol);
        Boolean activo = this.txt_activo.isSelected();

        // Se genera un bloque try para que la fecha sea correcta
        try {
            String[] fechaSeparada = fechaNac.split("-");
            int dia = Integer.parseInt(fechaSeparada[0]);
            int mes = Integer.parseInt(fechaSeparada[1]);
            int anio = Integer.parseInt(fechaSeparada[2]);
            LocalDate fechaNacimiento = LocalDate.of(anio, mes, dia);

//RolEmpleado rol, LocalDate fechaIngreso, boolean activo, String nombre, String apellido, String correo, String telefono, LocalDate fecha_nacimiento, String cedula            
            nuevoEmpleado = new Empleado(rolEnum, LocalDate.now(), activo, nombre, apellido, correo, telefono, fechaNacimiento, cedula);

        } catch (DateTimeParseException ex) {
            MostrarMensajePanel(ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }

        return nuevoEmpleado;
    }

    private void MostrarMensajePanel(String msm, String cabezera, int tipoPanel) {
        JOptionPane.showMessageDialog(null, msm, cabezera, tipoPanel);
    }

    private void LimpiarFormulario() {
        txt_apellido.setText("");
        txt_cedula.setText("");
        txt_correo.setText("");
        txt_nombre.setText("");
        txt_telefono.setText("");
        txt_fechaNacimiento.setText("");
        cmb_rol.setSelectedIndex(0);
        txt_activo.setSelected(false);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butt_actualizar;
    private javax.swing.JButton butt_agregar;
    private javax.swing.JButton butt_eliminar;
    private javax.swing.JButton butt_limpiar;
    private javax.swing.JComboBox<String> cmb_rol;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbl_empleado;
    private javax.swing.JRadioButton txt_activo;
    private javax.swing.JTextField txt_apellido;
    private javax.swing.JTextField txt_cedula;
    private javax.swing.JTextField txt_correo;
    private javax.swing.JTextField txt_fechaNacimiento;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_telefono;
    // End of variables declaration//GEN-END:variables
}
