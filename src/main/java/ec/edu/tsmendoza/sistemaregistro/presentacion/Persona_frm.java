/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package ec.edu.tsmendoza.sistemaregistro.presentacion;

import ec.edu.tsmendoza.sistemaregistro.negocio.PersonaServicio;
import java.awt.Color;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import modelo.Persona;

/**
 *
 * @author Dell Inspiron 16
 */
public class Persona_frm extends javax.swing.JInternalFrame {

    /**
     * Creates new form persona_frm
     */
    private PersonaServicio servicio;
    private SimpleDateFormat formato;
    public static DefaultTableModel modelo;
    private List<Persona> listadoPersonas;

    public Persona_frm() {
        initComponents();
        servicio = new PersonaServicio();
        this.formato = new SimpleDateFormat("dd-MM-yyyy");
        List<Persona> lista = servicio.ObtenerPersona();
        mostrarDatos(lista);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jXDatePicker1 = new org.jdesktop.swingx.JXDatePicker();
        jLabel1 = new javax.swing.JLabel();
        txt_nombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txt_apellido = new javax.swing.JTextField();
        txt_cedula = new javax.swing.JTextField();
        txt_correo = new javax.swing.JTextField();
        txt_telefono = new javax.swing.JTextField();
        butt_agregar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_usuario = new javax.swing.JTable();
        butt_eliminar = new javax.swing.JButton();
        butt_actualizar = new javax.swing.JButton();
        txt_fecha = new javax.swing.JTextField();
        butt_limpiar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Sistema Registro");

        jLabel1.setText("Nombre:");

        txt_nombre.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_nombreKeyTyped(evt);
            }
        });

        jLabel2.setText("Apellido:");

        jLabel3.setText("Correo:");

        jLabel4.setText("Telefono:");

        jLabel5.setText("F_Nacimiento:");

        jLabel6.setText("Cedula:");

        txt_apellido.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_apellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_apellidoKeyTyped(evt);
            }
        });

        txt_cedula.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_cedula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cedulaActionPerformed(evt);
            }
        });
        txt_cedula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_cedulaKeyTyped(evt);
            }
        });

        txt_correo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_correo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_correoKeyTyped(evt);
            }
        });

        txt_telefono.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_telefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_telefonoActionPerformed(evt);
            }
        });
        txt_telefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_telefonoKeyTyped(evt);
            }
        });

        butt_agregar.setText("Agregar");
        butt_agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butt_agregarActionPerformed(evt);
            }
        });

        tbl_usuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbl_usuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_usuarioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_usuario);

        butt_eliminar.setText("Eliminar");
        butt_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butt_eliminarActionPerformed(evt);
            }
        });

        butt_actualizar.setText("Actualizar");
        butt_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butt_actualizarActionPerformed(evt);
            }
        });

        txt_fecha.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_fecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_fechaActionPerformed(evt);
            }
        });
        txt_fecha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_fechaKeyTyped(evt);
            }
        });

        butt_limpiar.setText("Limpiar");
        butt_limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butt_limpiarActionPerformed(evt);
            }
        });

        jLabel7.setText("Buscar:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "*", "Nombre", "Apellido", "Cedula", "Edad" }));

        jButton1.setText("Buscar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel1))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(txt_cedula, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txt_correo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txt_apellido, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(txt_telefono, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txt_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(butt_actualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(butt_agregar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butt_limpiar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(butt_eliminar)))))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                        .addGap(6, 6, 6))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txt_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_apellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_cedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txt_correo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_telefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(txt_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(butt_agregar)
                            .addComponent(butt_eliminar)
                            .addComponent(butt_limpiar))
                        .addGap(18, 18, 18)
                        .addComponent(butt_actualizar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(113, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mostrarDatos(List<Persona> listaPersona) {
        listadoPersonas = listaPersona;
        modelo = new DefaultTableModel();
        modelo.addColumn("ID"); //0
        modelo.addColumn("Cedula");//1
        modelo.addColumn("Nombre");//2
        modelo.addColumn("Apellido");//3
        modelo.addColumn("Correo");//4
        modelo.addColumn("F_Nacimiento");//5
        modelo.addColumn("Edad");//6
        modelo.addColumn("Telefono");//7

        for (Persona pers : listaPersona) {
            Object[] fila = {pers.getId(), pers.getCedula(), pers.getNombre(), pers.getApellido(), pers.getCorreo(), pers.getFecha_nacimiento(), pers.getEdad(), pers.getTelefono()};
            modelo.addRow(fila);
        }
        tbl_usuario.setModel(modelo);
    }

    private void llenarFormularioDesdeTabla() {
        int filaSeleccionada = tbl_usuario.getSelectedRow();

        if (filaSeleccionada >= 0) {
            desactivarAgregar(true);
            // Obtenemos el objeto Persona desde la lista
            Persona personaSeleccionada = listadoPersonas.get(filaSeleccionada);

            txt_nombre.setText(personaSeleccionada.getNombre());
            txt_apellido.setText(personaSeleccionada.getApellido());
            txt_cedula.setText(personaSeleccionada.getCedula());
            txt_correo.setText(personaSeleccionada.getCorreo());
            txt_telefono.setText(personaSeleccionada.getTelefono());

            // Convertir LocalDate a String con formato dd-MM-yyyy
            LocalDate fechaNacimiento = personaSeleccionada.getFecha_nacimiento();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
            txt_fecha.setText(fechaNacimiento.format(formatter));
        }
    }

    // Se emplea este metodo para poder limpiar el formulario
    private void LimpiarFormulario() {
        txt_apellido.setText("");
        txt_cedula.setText("");
        txt_correo.setText("");
        txt_nombre.setText("");
        txt_telefono.setText("");
        txt_fecha.setText("");
        desactivarAgregar(false);
    }

    private void butt_agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butt_agregarActionPerformed

        long startTime = System.currentTimeMillis();
        AgregarPersona();
        long endTime = System.currentTimeMillis();
        System.out.println("Tiempo de respuesta al agregar persona: " + (endTime - startTime) + " ms");
        
    }//GEN-LAST:event_butt_agregarActionPerformed

    private void butt_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butt_actualizarActionPerformed
        // Se obtiene el id seleccionado de la tabla
        int filaSeleccionada = tbl_usuario.getSelectedRow();
        // Se valdia que la fila seleccionada sea superior a cero 
        if (filaSeleccionada >= 0) {

            // Si el formulario esta lleno proceder a enviarlo a la capa de negocio
            if (ValidarFormulario()) {
                String nombre = txt_nombre.getText();
                String apellido = txt_apellido.getText();
                String cedula = txt_cedula.getText();
                String correo = txt_correo.getText();
                String telefono = txt_telefono.getText();

                // 26-09-1994
                String fecha = txt_fecha.getText();
                String[] fechaSeparada = fecha.split("-");

                int dia = Integer.parseInt(fechaSeparada[0]);
                int mes = Integer.parseInt(fechaSeparada[1]);
                int anio = Integer.parseInt(fechaSeparada[2]);
                LocalDate fechaNacimiento = LocalDate.of(anio, mes, dia);

                //String nombre, String apellido, String correo, String telefono, LocalDate fecha_nacimiento, String cedula
                Persona actualizarPersona = new Persona(nombre, apellido, correo,
                        telefono, fechaNacimiento, cedula);

                int idPersona = listadoPersonas.get(filaSeleccionada).getId();

                boolean actualizado = servicio.ActualizarPersona(idPersona, actualizarPersona);

                if (actualizado) {
                    JOptionPane.showMessageDialog(null,
                            "Registro actualizado.",
                            "Información",
                            JOptionPane.INFORMATION_MESSAGE);
                    List<Persona> lista = servicio.ObtenerPersona();
                    mostrarDatos(lista);
                    LimpiarFormulario();
                } else {
                    JOptionPane.showMessageDialog(null,
                            "No se pudo actualizar el registro.",
                            "Advertencia",
                            JOptionPane.WARNING_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_butt_actualizarActionPerformed

    private void butt_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butt_eliminarActionPerformed
        // Se obtiene el id seleccionado de la tabla
        int filaSeleccionada = tbl_usuario.getSelectedRow();

        // Se valdia que la fila seleccionada sea superior a cero 
        if (filaSeleccionada >= 0) {
            // Confirmar antes de eliminar
            int confirmacion = JOptionPane.showConfirmDialog(null,
                    "¿Estás seguro de eliminar esta persona?",
                    "Confirmar eliminación",
                    JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                int idPersona = listadoPersonas.get(filaSeleccionada).getId();
                System.out.println("El id" + idPersona);

                boolean eliminado = servicio.EliminarPersonaPorId(idPersona);

                if (eliminado) {
                    JOptionPane.showMessageDialog(null, "Persona eliminada correctamente.");
                    List<Persona> listaPersona = servicio.ObtenerPersona();
                    mostrarDatos(listaPersona);
                } else {
                    JOptionPane.showMessageDialog(null, "No se pudo eliminar la persona.");
                }
            }
        }
    }//GEN-LAST:event_butt_eliminarActionPerformed

    public void desactivarAgregar(boolean activo) {
        if (activo) {
            butt_agregar.setEnabled(false);
        } else {
            butt_agregar.setEnabled(true);
        }
    }

    private void tbl_usuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_usuarioMouseClicked
        llenarFormularioDesdeTabla();
    }//GEN-LAST:event_tbl_usuarioMouseClicked

    private void butt_limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butt_limpiarActionPerformed
        LimpiarFormulario();
    }//GEN-LAST:event_butt_limpiarActionPerformed

    private void txt_cedulaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_cedulaKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
        if (txt_cedula.getText().length() > 9) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_cedulaKeyTyped

    private void txt_cedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cedulaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cedulaActionPerformed

    private void txt_telefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_telefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_telefonoActionPerformed

    private void txt_telefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_telefonoKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
        if (txt_telefono.getText().length() > 9) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_telefonoKeyTyped

    private void txt_nombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nombreKeyTyped
        char c = evt.getKeyChar();
        if (Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_nombreKeyTyped

    private void txt_apellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_apellidoKeyTyped
        char c = evt.getKeyChar();
        if (Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_apellidoKeyTyped

    private void txt_correoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_correoKeyTyped
        char c = evt.getKeyChar();
        if (Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_correoKeyTyped

    private void txt_fechaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_fechaKeyTyped

    }//GEN-LAST:event_txt_fechaKeyTyped

    private void txt_fechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_fechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_fechaActionPerformed

    public boolean ValidarFormulario() {
        Border bordeRojo = BorderFactory.createLineBorder(Color.RED, 2);
        Border bordeNegro = BorderFactory.createLineBorder(Color.BLACK, 2);

        txt_cedula.setBorder(txt_cedula.getText().trim().isEmpty() ? bordeRojo : bordeNegro);
        txt_correo.setBorder(txt_correo.getText().trim().isEmpty() ? bordeRojo : bordeNegro);
        txt_nombre.setBorder(txt_nombre.getText().trim().isEmpty() ? bordeRojo : bordeNegro);
        txt_apellido.setBorder(txt_nombre.getText().trim().isEmpty() ? bordeRojo : bordeNegro);
        txt_telefono.setBorder(txt_telefono.getText().trim().isEmpty() ? bordeRojo : bordeNegro);
        txt_fecha.setBorder(txt_fecha.getText().trim().isEmpty() ? bordeRojo : bordeNegro);

        return !(txt_cedula.getText().trim().isEmpty()
                || txt_correo.getText().trim().isEmpty()
                || txt_nombre.getText().trim().isEmpty()
                || txt_telefono.getText().trim().isEmpty()
                || txt_fecha.getText().trim().isEmpty());
    }

    private void AgregarPersona() {
        try {
            if (ValidarFormulario()) {
                String nombre = txt_nombre.getText();
                String apellido = txt_apellido.getText();
                String cedula = txt_cedula.getText();
                String correo = txt_correo.getText();
                String telefono = txt_telefono.getText();

                // 26-09-1994
                String fecha = txt_fecha.getText();
                String[] fechaSeparada = fecha.split("-");

                int dia = Integer.parseInt(fechaSeparada[0]);
                int mes = Integer.parseInt(fechaSeparada[1]);
                int anio = Integer.parseInt(fechaSeparada[2]);
                LocalDate fechaNacimiento = LocalDate.of(anio, mes, dia);

                //String nombre, String apellido, String correo, String telefono, LocalDate fecha_nacimiento, String cedula
                Persona nuevaPersona = new Persona(nombre, apellido, correo,
                        telefono, fechaNacimiento, cedula);

                // [0] ya existe la persomna  [1] registro de persona exitoso
                // [2] Error interno [3] la persona es menor de edad
                int registro = servicio.AgregarNuevsPersona(nuevaPersona);

//            if(dia > 31 || dia < 1){ JOptionPane.showMessageDialog(null, "Ingrese un DIA valido"); registro = 2;}
//            if(mes > 12 || mes < 1){JOptionPane.showMessageDialog(null, "Ingrese un MES valido"); registro =2;}
                switch (registro) {
                    case 0:
                        JOptionPane.showMessageDialog(null,
                                "Ya existe la persona con ese número de cédula.",
                                "Advertencia",
                                JOptionPane.WARNING_MESSAGE);
                        break;

                    case 1:
                        JOptionPane.showMessageDialog(null,
                                "Registro exitoso.",
                                "Información",
                                JOptionPane.INFORMATION_MESSAGE);
                        // Se procede a actualizar la tabla de registro y limpiar el formulario
                        List<Persona> lista = servicio.ObtenerPersona();
                        mostrarDatos(lista);
                        LimpiarFormulario();
                        break;

                    case 2:
                        JOptionPane.showMessageDialog(null,
                                "Error interno, intentelo más tarde.",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                        break;

                    case 3:
                        JOptionPane.showMessageDialog(null,
                                "El sistema solo permite registrar a mayores de edad.",
                                "Advertencia",
                                JOptionPane.QUESTION_MESSAGE);
                        break;
                }
            } else {
                JOptionPane.showMessageDialog(null,
                        "Debe completar todos los campos obligatorios.",
                        "Advertencia",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (DateTimeException ex) {
            JOptionPane.showMessageDialog(null,
                    "Ingrese una fecha valida",
                    "Advertencia",
                    JOptionPane.QUESTION_MESSAGE);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butt_actualizar;
    private javax.swing.JButton butt_agregar;
    private javax.swing.JButton butt_eliminar;
    private javax.swing.JButton butt_limpiar;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private org.jdesktop.swingx.JXDatePicker jXDatePicker1;
    private javax.swing.JTable tbl_usuario;
    private javax.swing.JTextField txt_apellido;
    private javax.swing.JTextField txt_cedula;
    private javax.swing.JTextField txt_correo;
    private javax.swing.JTextField txt_fecha;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_telefono;
    // End of variables declaration//GEN-END:variables
}
